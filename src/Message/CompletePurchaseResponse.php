<?php

/*
 * WebMoney driver for the Omnipay PHP payment processing library
 *
 * @link      https://github.com/hiqdev/omnipay-webmoney
 * @package   omnipay-webmoney
 * @license   BSD-3-Clause
 * @copyright Copyright (c) 2015, HiQDev (http://hiqdev.com/)
 */

namespace Omnipay\WebMoney\Message;

use Omnipay\Common\Exception\InvalidResponseException;
use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RequestInterface;

/**
 * WebMoney Complete Purchase Response.
 */
class CompletePurchaseResponse extends AbstractResponse
{
    public function __construct(RequestInterface $request, $data)
    {
        $this->request = $request;
        $this->data    = $data;

        if ($this->getPrerequest()) {
            throw new InvalidResponseException('This is prerequest');
        }

        if ($this->getHash() !== $this->calculateHash()) {
            throw new InvalidResponseException('Invalid hash');
        }

        if ($this->request->getTestMode() !== $this->getTestMode()) {
            throw new InvalidResponseException('Invalid test mode');
        }
    }

    public function isSuccessful()
    {
        return true;
    }

    /**
     * The transaction identifier generated by the merchant website.
     */
    public function getTransactionId()
    {
        return $this->data['LMI_PAYMENT_NO'];
    }

    /**
     * The transaction identifier generated by the payment gateway.
     */
    public function getTransactionReference()
    {
        return $this->data['LMI_SYS_TRANS_NO'];
    }

    /**
     * The payer reference given by the payment gateway.
     */
    public function getPayerReference()
    {
        return $this->data['LMI_PAYER_PURSE'] . '/' . $this->data['LMI_PAYER_WM'];
    }

    public function getMerchantPurse()
    {
        return $this->data['LMI_PAYEE_PURSE'];
    }

    public function getAmount()
    {
        return $this->data['LMI_PAYMENT_AMOUNT'];
    }

    public function getPrerequest()
    {
        return $this->data['LMI_PREREQUEST'];
    }

    public function getTestMode()
    {
        return (bool) $this->data['LMI_MODE'];
    }

    public function getHash()
    {
        return $this->data['LMI_HASH'];
    }

    public static $hashTypes = [
        '32'  => 'md5',
        '64'  => 'sha256',
        '132' => 'sign',
    ];

    public function getHashType()
    {
        return static::$hashTypes(strlen($this->getHash()));
    }

    /**
     * Calculate hash to verify transaction details.
     *
     * @throws InvalidResponseException
     *
     * @return string
     */
    private function calculateHash()
    {
        $hashType = $this->getHashType();

        if (!$hashType || $hashType === 'sign') {
            throw new InvalidResponseException("Invalid hash type: $hashType");
        }

        return strtoupper(hash($hashType,
            $this->request->getMerchantPurse() .
            $this->data['LMI_PAYMENT_AMOUNT'] . $this->data['LMI_PAYMENT_NO'] . $this->data['LMI_MODE'] .
            $this->data['LMI_SYS_INVS_NO'] . $this->data['LMI_SYS_TRANS_NO'] . $this->data['LMI_SYS_TRANS_DATE'] .
            $this->request->getSecretkey() .
            $this->data['LMI_PAYER_PURSE'] . $this->data['LMI_PAYER_WM']
        ));
    }
}
